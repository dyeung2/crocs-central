<%= form_with(model: [:admin, @product, admin_stock], class: "contents", html: { id: 'adminStockForm' }) do |form| %>
  <% if admin_stock.errors.any? %>
    <div id="error_explanation" class="bg-red-50 text-red-500 px-3 py-2 font-medium rounded-lg mt-3">
      <h2><%= pluralize(admin_stock.errors.count, "error") %> prohibited this admin_stock from being saved:</h2>
      <ul>
        <% admin_stock.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>
  <div class="my-5">
    <%= form.label :size %>
    <%= form.text_field :size, class: "block shadow rounded-md border border-gray-200 outline-none px-3 py-2 mt-2 w-full", required: true, id: 'stockSize' %>
  </div>
  <div class="my-5">
    <%= form.label :amount %>
    <%= form.number_field :amount, class: "block shadow rounded-md border border-gray-200 outline-none px-3 py-2 mt-2 w-full", required: true, id: 'stockAmount' %>
  </div>
  <div class="inline">
    <%= form.submit class: "rounded-lg py-3 px-5 bg-coolMint text-white inline-block font-bold cursor-pointer" %>
  </div>
<% end %>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('adminStockForm');
    const sizeField = document.getElementById('stockSize');
    const amountField = document.getElementById('stockAmount');

    form.addEventListener('submit', function (event) {
      let valid = true;
      let errorMessage = '';

      // Validate fields
      if (!sizeField.value.trim()) {
        valid = false;
        errorMessage += 'Size is required.\n';
      }

      if (!amountField.value.trim() || isNaN(amountField.value) || parseInt(amountField.value, 10) < 0) {
        valid = false;
        errorMessage += 'Amount must be a non-negative number.\n';
      }

      // Show alert and prevent form submission if validation fails
      if (!valid) {
        event.preventDefault();
        alert('Please fix the following errors:\n' + errorMessage);
      }
    });
  });
</script>
